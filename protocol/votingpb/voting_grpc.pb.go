// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: votingpb/voting.proto

package votingpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Voting_Validate_FullMethodName = "/votingpb.Voting/Validate"
	Voting_Prepare_FullMethodName  = "/votingpb.Voting/Prepare"
	Voting_Vote_FullMethodName     = "/votingpb.Voting/Vote"
	Voting_GetVote_FullMethodName  = "/votingpb.Voting/GetVote"
)

// VotingClient is the client API for Voting service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VotingClient interface {
	Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateResponse, error)
	Prepare(ctx context.Context, in *PrepareRequest, opts ...grpc.CallOption) (*PrepareResponse, error)
	Vote(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	GetVote(ctx context.Context, in *GetVoteRequest, opts ...grpc.CallOption) (*GetVoteResponse, error)
}

type votingClient struct {
	cc grpc.ClientConnInterface
}

func NewVotingClient(cc grpc.ClientConnInterface) VotingClient {
	return &votingClient{cc}
}

func (c *votingClient) Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateResponse)
	err := c.cc.Invoke(ctx, Voting_Validate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingClient) Prepare(ctx context.Context, in *PrepareRequest, opts ...grpc.CallOption) (*PrepareResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PrepareResponse)
	err := c.cc.Invoke(ctx, Voting_Prepare_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingClient) Vote(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, Voting_Vote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingClient) GetVote(ctx context.Context, in *GetVoteRequest, opts ...grpc.CallOption) (*GetVoteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVoteResponse)
	err := c.cc.Invoke(ctx, Voting_GetVote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VotingServer is the server API for Voting service.
// All implementations must embed UnimplementedVotingServer
// for forward compatibility
type VotingServer interface {
	Validate(context.Context, *ValidateRequest) (*ValidateResponse, error)
	Prepare(context.Context, *PrepareRequest) (*PrepareResponse, error)
	Vote(context.Context, *VoteRequest) (*VoteResponse, error)
	GetVote(context.Context, *GetVoteRequest) (*GetVoteResponse, error)
	mustEmbedUnimplementedVotingServer()
}

// UnimplementedVotingServer must be embedded to have forward compatible implementations.
type UnimplementedVotingServer struct {
}

func (UnimplementedVotingServer) Validate(context.Context, *ValidateRequest) (*ValidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validate not implemented")
}
func (UnimplementedVotingServer) Prepare(context.Context, *PrepareRequest) (*PrepareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prepare not implemented")
}
func (UnimplementedVotingServer) Vote(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Vote not implemented")
}
func (UnimplementedVotingServer) GetVote(context.Context, *GetVoteRequest) (*GetVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVote not implemented")
}
func (UnimplementedVotingServer) mustEmbedUnimplementedVotingServer() {}

// UnsafeVotingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VotingServer will
// result in compilation errors.
type UnsafeVotingServer interface {
	mustEmbedUnimplementedVotingServer()
}

func RegisterVotingServer(s grpc.ServiceRegistrar, srv VotingServer) {
	s.RegisterService(&Voting_ServiceDesc, srv)
}

func _Voting_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Voting_Validate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServer).Validate(ctx, req.(*ValidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Voting_Prepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServer).Prepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Voting_Prepare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServer).Prepare(ctx, req.(*PrepareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Voting_Vote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServer).Vote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Voting_Vote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServer).Vote(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Voting_GetVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServer).GetVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Voting_GetVote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServer).GetVote(ctx, req.(*GetVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Voting_ServiceDesc is the grpc.ServiceDesc for Voting service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Voting_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "votingpb.Voting",
	HandlerType: (*VotingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Validate",
			Handler:    _Voting_Validate_Handler,
		},
		{
			MethodName: "Prepare",
			Handler:    _Voting_Prepare_Handler,
		},
		{
			MethodName: "Vote",
			Handler:    _Voting_Vote_Handler,
		},
		{
			MethodName: "GetVote",
			Handler:    _Voting_GetVote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "votingpb/voting.proto",
}
